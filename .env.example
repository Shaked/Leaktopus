# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set it or it's being
# overwritten in development to make your life easier.

# Rather than use the directory name, let's control the name of the project.
COMPOSE_PROJECT_NAME=leaktopus

# In development avoid writing out bytecode to __pycache__ directories.
#PYTHONDONTWRITEBYTECODE=
PYTHONDONTWRITEBYTECODE=true

# You should generate a random string of 99+ characters for this value in prod.
# You can generate secure secrets by running: ./run flask secrets
SECRET_KEY=insecure_key_for_dev

# Which environment is running? These should be "development" or "production".
#FLASK_ENV=production
FLASK_ENV=development
#NODE_ENV=production
NODE_ENV=development

# In development with Docker Desktop / Linux the default value should work.
# If you have Docker running in a custom VM, put the VM's IP here instead.
#
# In production you'll want to set this to your domain name or whatever you
# plan to access in your browser, such as example.com.
#SERVER_NAME=localhost:8000

# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
#PORT=8000

# How many workers and threads should your app use? WEB_CONCURRENCY defaults
# to the server's CPU count * 2. That is a good starting point. In development
# it's a good idea to use 1 to avoid race conditions when debugging.
#WEB_CONCURRENCY=
WEB_CONCURRENCY=1
#PYTHON_MAX_THREADS=1

# Do you want code reloading to work with the gunicorn app server?
#WEB_RELOAD=false
WEB_RELOAD=true

# Should the Webpack watcher use polling? Not all Docker hosts support inotify.
# If you find your assets aren't updating in development then set this to true.
#WEBPACK_WATCHER_POLL=false

## What mail server should you connect to?
#MAIL_SERVER=smtp.gmail.com
#MAIL_PORT=587
#MAIL_USE_TLS=true
#MAIL_USE_SSL=false
MAIL_USERNAME=
MAIL_PASSWORD=
#MAIL_DEFAULT_SENDER=contact@local.host

## Connection string to Redis. This will be used to connect directly to Redis
# and for Celery. You can always split your Redis servers up later if needed.
REDIS_URL=redis://redis:6379/0

# You can choose between DEBUG, INFO, WARNING, ERROR, CRITICAL or FATAL.
# DEBUG tends to get noisy but it could be useful for troubleshooting.
#CELERY_LOG_LEVEL=info

# Should Docker restart your containers if they go down in unexpected ways?
#DOCKER_RESTART_POLICY=unless-stopped
DOCKER_RESTART_POLICY=no

# What healthcheck test command do you want to run? In development, having it
# curl your web server will result in a lot of log spam, so setting it to
# /bin/true is an easy way to make the healthcheck do basically nothing.
#DOCKER_WEB_HEALTHCHECK_TEST=curl localhost:8000/up
DOCKER_WEB_HEALTHCHECK_TEST=/bin/true

# What ip:port should be published back to the Docker host for the app server?
# If you're using Docker Toolbox or a custom VM you can't use 127.0.0.1. This
# is being overwritten in dev to be compatible with more dev environments.
#
# If you have a port conflict because something else is using 8000 then you
# can either stop that process or change this 8000 to be something else.
#
# Use the default in production to avoid having gunicorn directly accessible to
# the internet since it'll very likely be behind nginx or a load balancer.
#DOCKER_WEB_PORT_FORWARD=127.0.0.1:8000
DOCKER_WEB_PORT_FORWARD=8000

# What volume path should be used? In development we want to volume mount
# everything so we can develop our code without rebuilding our Docker images.
#DOCKER_WEB_VOLUME=./public:/app/public
DOCKER_WEB_VOLUME=.:/app

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#DOCKER_REDIS_CPUS=0
#DOCKER_REDIS_MEMORY=0
#DOCKER_WEB_CPUS=0
#DOCKER_WEB_MEMORY=0
#DOCKER_WORKER_CPUS=0
#DOCKER_WORKER_MEMORY=0

# GitPython Variables
GIT_PYTHON_REFRESH=quiet

ELK_VERSION=7.17.4

# Replace [GITHUB_ACCESS_TOKEN] with your own GITHUB_ACCESS_TOKEN, and make sure you remove the square brackets.
# For example:
# GITHUB_ACCESS_TOKEN=xxxxxxxxxxxxxxx
GITHUB_ACCESS_TOKEN=[GITHUB_ACCESS_TOKEN]

# Using Github App
#GITHUB_USE_APP=True
#GITHUB_APP_ID=xxxxx
#GITHUB_INSTALLATION_ID=xxxxx
#GITHUB_APP_PRIVATE_KEY_PATH=/app/private-key.pem

ES_INDEXING_ENABLED=1
ES_HOST=elasticsearch
ES_PORT=9200
ES_USER=elastic
ES_PASS=changeme
CLONES_DIR=/data/
REPO_MAX_CLONE_SIZE=100000

# Request Caching
CELERY_FILES_PATH=/tmp
REQUESTS_CACHE_ENABLED=True
REQUESTS_CACHE_LOG_LEVEL="WARNING"

# Cron Interval in seconds, default of 15 minutes.
CRON_INTERVAL=900
# Teams webhook
#TEAMS_WEBHOOK_URL=https://company-name.webhook.office.com/webhookb2/token

# Slack Bot
# Requires OAuth Bot token with scope 'chat:write'.
# @see https://slack.dev/python-slack-sdk/web/index.html.
#SLACK_BOT_TOKEN=xoxb-xxxxxxxxxxxxxx
# Slack target channel ID
#SLACK_CHANNEL_ID=C0XXXXXXX

# HTTPS enabled flag
HTTPS_ENABLED=0

# Frontend environment variables
LEAKTOPUS_API_URL=http://localhost:8000/

# Feature Flags
USE_EXPERIMENTAL_REFACTORING=True
USE_EXPERIMENTAL_SHOW_PARTIAL_RESULTS_EVEN_IF_TASK_FAILS=True

# Debugging with Burp (or other proxy)
#HTTP_PROXY='http://host.docker.internal:9090'
#HTTPS_PROXY='http://host.docker.internal:9090'
#REQUESTS_CA_BUNDLE='/tmp/certificate.pem'
DB_PATH=/opt/code/db
