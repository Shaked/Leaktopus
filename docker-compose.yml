version: "3.4"

x-app: &default-app
  build:
    context: "leaktopus_backend/."
    target: "app"
    args:
      - "FLASK_ENV=${FLASK_ENV:-production}"
  depends_on:
    - redis
  env_file:
    - ".env"
  restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
  stop_grace_period: "3s"
  tty: true
  volumes:
    - "${DB_PATH:-db}:/db"
#    - "./leaktopus_backend/private-key.pem:/app/private-key.pem"

services:
  redis:
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_REDIS_CPUS:-0}"
          memory: "${DOCKER_REDIS_MEMORY:-0}"
    env_file:
      - ".env"
    image: "redis:6.0.10-buster"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "redis:/data"
    ports:
      - "6379:6379"

  web:
    <<: *default-app
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:8000/up}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-localhost:8000}:8000"

  frontend:
    build: "./leaktopus_frontend"
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    env_file:
      - ".env"
    ports:
      - "8080:80"

  worker:
    <<: *default-app
    command: watchmedo auto-restart --directory=./leaktopus/ --patterns=*.py --recursive -- celery -A "leaktopus.celery_app.celery" worker --beat -s ${CELERY_FILES_PATH}/celerybeat-schedule -l "${CELERY_LOG_LEVEL:-info}"
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WORKER_CPUS:-0}"
          memory: "${DOCKER_WORKER_MEMORY:-0}"
    volumes:
      - "data:/data"
      - "${DB_PATH:-db}:/db"

volumes:
  db: { }
  data: { }
  redis: { }
